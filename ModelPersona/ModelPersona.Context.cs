//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ModelPersona
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PruebaTecnicaPersonasEntities : DbContext
    {
        public PruebaTecnicaPersonasEntities()
            : base("name=PruebaTecnicaPersonasEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<CuentasBancos> CuentasBancos { get; set; }
        public virtual DbSet<Pais> Pais { get; set; }
        public virtual DbSet<Persona> Persona { get; set; }
        public virtual DbSet<Sexo> Sexo { get; set; }
        public virtual DbSet<TipoRegimenFiscal> TipoRegimenFiscal { get; set; }
    
        public virtual int DeletePersona(Nullable<int> idPersona)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("idPersona", idPersona) :
                new ObjectParameter("idPersona", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePersona", idPersonaParameter);
        }
    
        public virtual ObjectResult<GetPersona_Result> GetPersona()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersona_Result>("GetPersona");
        }
    
        public virtual ObjectResult<GetPersonaById_Result> GetPersonaById(Nullable<int> idPersona)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("idPersona", idPersona) :
                new ObjectParameter("idPersona", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPersonaById_Result>("GetPersonaById", idPersonaParameter);
        }
    
        public virtual int InsertPersona(string nombre, string apellidoPaterno, string apellidoMaterno, Nullable<int> idTipoRegimen, Nullable<System.DateTime> fechaNacimiento, string rFC, string cURP, Nullable<int> idPais, Nullable<int> idSexo, Nullable<bool> estatus)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var idTipoRegimenParameter = idTipoRegimen.HasValue ?
                new ObjectParameter("idTipoRegimen", idTipoRegimen) :
                new ObjectParameter("idTipoRegimen", typeof(int));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var idPaisParameter = idPais.HasValue ?
                new ObjectParameter("idPais", idPais) :
                new ObjectParameter("idPais", typeof(int));
    
            var idSexoParameter = idSexo.HasValue ?
                new ObjectParameter("idSexo", idSexo) :
                new ObjectParameter("idSexo", typeof(int));
    
            var estatusParameter = estatus.HasValue ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPersona", nombreParameter, apellidoPaternoParameter, apellidoMaternoParameter, idTipoRegimenParameter, fechaNacimientoParameter, rFCParameter, cURPParameter, idPaisParameter, idSexoParameter, estatusParameter);
        }
    
        public virtual int UpdatePresona(Nullable<int> idPersona, string nombre, string apellidoPaterno, string apellidoMaterno, Nullable<int> idTipoRegimen, Nullable<System.DateTime> fechaNacimiento, string rFC, string cURP, Nullable<int> idPais, Nullable<int> idSexo, Nullable<bool> estatus)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("idPersona", idPersona) :
                new ObjectParameter("idPersona", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("ApellidoPaterno", apellidoPaterno) :
                new ObjectParameter("ApellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("ApellidoMaterno", apellidoMaterno) :
                new ObjectParameter("ApellidoMaterno", typeof(string));
    
            var idTipoRegimenParameter = idTipoRegimen.HasValue ?
                new ObjectParameter("idTipoRegimen", idTipoRegimen) :
                new ObjectParameter("idTipoRegimen", typeof(int));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var rFCParameter = rFC != null ?
                new ObjectParameter("RFC", rFC) :
                new ObjectParameter("RFC", typeof(string));
    
            var cURPParameter = cURP != null ?
                new ObjectParameter("CURP", cURP) :
                new ObjectParameter("CURP", typeof(string));
    
            var idPaisParameter = idPais.HasValue ?
                new ObjectParameter("idPais", idPais) :
                new ObjectParameter("idPais", typeof(int));
    
            var idSexoParameter = idSexo.HasValue ?
                new ObjectParameter("idSexo", idSexo) :
                new ObjectParameter("idSexo", typeof(int));
    
            var estatusParameter = estatus.HasValue ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePresona", idPersonaParameter, nombreParameter, apellidoPaternoParameter, apellidoMaternoParameter, idTipoRegimenParameter, fechaNacimientoParameter, rFCParameter, cURPParameter, idPaisParameter, idSexoParameter, estatusParameter);
        }
    
        public virtual ObjectResult<string> JsonCuentasBancos(Nullable<int> idPersona)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("idPersona", idPersona) :
                new ObjectParameter("idPersona", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("JsonCuentasBancos", idPersonaParameter);
        }
    }
}
